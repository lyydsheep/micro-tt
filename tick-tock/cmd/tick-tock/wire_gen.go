// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"tick-tock/internal/biz"
	"tick-tock/internal/conf"
	"tick-tock/internal/daemon"
	"tick-tock/internal/data"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(server *conf.Server, confData *conf.Data) (*kratos.App, func(), error) {
	query := data.NewQuery(confData)
	client := data.NewRedis(confData)
	dataData, cleanup, err := data.NewData(query, client)
	if err != nil {
		return nil, nil, err
	}
	taskDefineRepo := data.NewTaskDefineRepo(dataData)
	taskRepo := data.NewTaskRepo(dataData)
	transaction := data.NewTransaction(query, client)
	migratorUseCase := biz.NewMigrator(confData, taskDefineRepo, taskRepo, transaction)
	lock := data.NewLock(dataData)
	taskCache := data.NewTaskCache(dataData)
	executorUsecase := biz.NewExecutorUsecase(confData, taskDefineRepo, taskRepo)
	triggerUsecase := biz.NewTriggerUsecase(confData, taskCache, taskRepo, executorUsecase)
	schedulerUsecase := biz.NewSchedulerUsecase(lock, confData, triggerUsecase)
	v := daemon.NewHandles(migratorUseCase, schedulerUsecase)
	v2 := daemon.NewTasks(server, v)
	daemonServer := daemon.NewServer(server, v2)
	app := newApp(daemonServer)
	return app, func() {
		cleanup()
	}, nil
}
