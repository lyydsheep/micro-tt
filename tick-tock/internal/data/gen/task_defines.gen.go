// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"tick-tock/internal/biz"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTaskDefine(db *gorm.DB, opts ...gen.DOOption) taskDefine {
	_taskDefine := taskDefine{}

	_taskDefine.taskDefineDo.UseDB(db, opts...)
	_taskDefine.taskDefineDo.UseModel(&biz.TaskDefine{})

	tableName := _taskDefine.taskDefineDo.TableName()
	_taskDefine.ALL = field.NewAsterisk(tableName)
	_taskDefine.ID = field.NewInt64(tableName, "id")
	_taskDefine.Tid = field.NewString(tableName, "tid")
	_taskDefine.App = field.NewString(tableName, "app")
	_taskDefine.Name = field.NewString(tableName, "name")
	_taskDefine.Status = field.NewInt32(tableName, "status")
	_taskDefine.Cron = field.NewString(tableName, "cron")
	_taskDefine.NotifyHTTPParam = field.NewString(tableName, "notify_http_param")
	_taskDefine.CreateTime = field.NewTime(tableName, "create_time")
	_taskDefine.UpdateTime = field.NewTime(tableName, "update_time")

	_taskDefine.fillFieldMap()

	return _taskDefine
}

// taskDefine 任务定义表
type taskDefine struct {
	taskDefineDo taskDefineDo

	ALL             field.Asterisk
	ID              field.Int64
	Tid             field.String // 任务唯一标识（UUID）
	App             field.String // 所属应用标识
	Name            field.String // 任务名称
	Status          field.Int32  // 状态：1-active, 2-inactive
	Cron            field.String // Cron表达式（标准5/6字段）
	NotifyHTTPParam field.String // 回调参数（JSON格式，如{"url":"","method":"POST","headers":{}}）
	CreateTime      field.Time
	UpdateTime      field.Time

	fieldMap map[string]field.Expr
}

func (t taskDefine) Table(newTableName string) *taskDefine {
	t.taskDefineDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskDefine) As(alias string) *taskDefine {
	t.taskDefineDo.DO = *(t.taskDefineDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskDefine) updateTableName(table string) *taskDefine {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Tid = field.NewString(table, "tid")
	t.App = field.NewString(table, "app")
	t.Name = field.NewString(table, "name")
	t.Status = field.NewInt32(table, "status")
	t.Cron = field.NewString(table, "cron")
	t.NotifyHTTPParam = field.NewString(table, "notify_http_param")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *taskDefine) WithContext(ctx context.Context) *taskDefineDo {
	return t.taskDefineDo.WithContext(ctx)
}

func (t taskDefine) TableName() string { return t.taskDefineDo.TableName() }

func (t taskDefine) Alias() string { return t.taskDefineDo.Alias() }

func (t taskDefine) Columns(cols ...field.Expr) gen.Columns { return t.taskDefineDo.Columns(cols...) }

func (t *taskDefine) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskDefine) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["tid"] = t.Tid
	t.fieldMap["app"] = t.App
	t.fieldMap["name"] = t.Name
	t.fieldMap["status"] = t.Status
	t.fieldMap["cron"] = t.Cron
	t.fieldMap["notify_http_param"] = t.NotifyHTTPParam
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t taskDefine) clone(db *gorm.DB) taskDefine {
	t.taskDefineDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskDefine) replaceDB(db *gorm.DB) taskDefine {
	t.taskDefineDo.ReplaceDB(db)
	return t
}

type taskDefineDo struct{ gen.DO }

func (t taskDefineDo) Debug() *taskDefineDo {
	return t.withDO(t.DO.Debug())
}

func (t taskDefineDo) WithContext(ctx context.Context) *taskDefineDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskDefineDo) ReadDB() *taskDefineDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskDefineDo) WriteDB() *taskDefineDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskDefineDo) Session(config *gorm.Session) *taskDefineDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskDefineDo) Clauses(conds ...clause.Expression) *taskDefineDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskDefineDo) Returning(value interface{}, columns ...string) *taskDefineDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskDefineDo) Not(conds ...gen.Condition) *taskDefineDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskDefineDo) Or(conds ...gen.Condition) *taskDefineDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskDefineDo) Select(conds ...field.Expr) *taskDefineDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskDefineDo) Where(conds ...gen.Condition) *taskDefineDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskDefineDo) Order(conds ...field.Expr) *taskDefineDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskDefineDo) Distinct(cols ...field.Expr) *taskDefineDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskDefineDo) Omit(cols ...field.Expr) *taskDefineDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskDefineDo) Join(table schema.Tabler, on ...field.Expr) *taskDefineDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskDefineDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taskDefineDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskDefineDo) RightJoin(table schema.Tabler, on ...field.Expr) *taskDefineDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskDefineDo) Group(cols ...field.Expr) *taskDefineDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskDefineDo) Having(conds ...gen.Condition) *taskDefineDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskDefineDo) Limit(limit int) *taskDefineDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskDefineDo) Offset(offset int) *taskDefineDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskDefineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taskDefineDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskDefineDo) Unscoped() *taskDefineDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskDefineDo) Create(values ...*biz.TaskDefine) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskDefineDo) CreateInBatches(values []*biz.TaskDefine, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskDefineDo) Save(values ...*biz.TaskDefine) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskDefineDo) First() (*biz.TaskDefine, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*biz.TaskDefine), nil
	}
}

func (t taskDefineDo) Take() (*biz.TaskDefine, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*biz.TaskDefine), nil
	}
}

func (t taskDefineDo) Last() (*biz.TaskDefine, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*biz.TaskDefine), nil
	}
}

func (t taskDefineDo) Find() ([]*biz.TaskDefine, error) {
	result, err := t.DO.Find()
	return result.([]*biz.TaskDefine), err
}

func (t taskDefineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*biz.TaskDefine, err error) {
	buf := make([]*biz.TaskDefine, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskDefineDo) FindInBatches(result *[]*biz.TaskDefine, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskDefineDo) Attrs(attrs ...field.AssignExpr) *taskDefineDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskDefineDo) Assign(attrs ...field.AssignExpr) *taskDefineDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskDefineDo) Joins(fields ...field.RelationField) *taskDefineDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskDefineDo) Preload(fields ...field.RelationField) *taskDefineDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskDefineDo) FirstOrInit() (*biz.TaskDefine, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*biz.TaskDefine), nil
	}
}

func (t taskDefineDo) FirstOrCreate() (*biz.TaskDefine, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*biz.TaskDefine), nil
	}
}

func (t taskDefineDo) FindByPage(offset int, limit int) (result []*biz.TaskDefine, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskDefineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskDefineDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskDefineDo) Delete(models ...*biz.TaskDefine) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskDefineDo) withDO(do gen.Dao) *taskDefineDo {
	t.DO = *do.(*gen.DO)
	return t
}
