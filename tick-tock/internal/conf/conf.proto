syntax = "proto3";
package kratos.api;

option go_package = "tick-tock/internal/conf;conf";

import "google/protobuf/duration.proto";

message Bootstrap {
  Server server = 1;
  Data data = 2;
}

message Server {
  message HTTP {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  message GRPC {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  message TASK {
    repeated task tasks = 1;
  }
  HTTP http = 1;
  GRPC grpc = 2;
  TASK task = 3;
}

message task {
  string name = 1;
  string type = 2;
  // once --->  duration format, eg: 1s, 23m, 3.5h
  // cron ---> 支持 cron表达式、@every 1s（固定时间间隔）
  string schedule = 3;
}

message Data {
  message Database {
    string addr = 1;
    string username = 2;
    string password = 3;
    string database = 4;
    int32 max_open_conn = 5;
    int32 max_idle_conn = 6;
    google.protobuf.Duration conn_max_idle_time = 7;
  }
  message Redis {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration read_timeout = 3;
    google.protobuf.Duration write_timeout = 4;
  }
  Database database = 1;
  Redis redis = 2;
  Scheduler scheduler = 3;
  Migrator migrator = 4;
  Trigger trigger = 5;
}

message Scheduler {
  // 轮询时间
  google.protobuf.Duration poll_interval = 1;
  // 上锁时间
  google.protobuf.Duration lock_duration = 2;
  // 任务成功后延续长锁时间
  google.protobuf.Duration renew_lock_duration = 3;
  // 协程池大小
  int32 worker_pool_size = 4;
  // 分片数量
  int32 bucket_count = 5;
  // 锁前缀
  string lock_prefix = 6;
}

message Migrator {
  google.protobuf.Duration migrate_step = 1;
}

message Trigger {
  google.protobuf.Duration poll_interval = 1;
  google.protobuf.Duration range_gap = 2;
  int32 worker_pool_size = 3;
}