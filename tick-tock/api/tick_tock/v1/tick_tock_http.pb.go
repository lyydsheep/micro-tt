// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/tick_tock/v1/tick_tock.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTickTockerCreateTaskDefine = "/helloworld.v1.TickTocker/CreateTaskDefine"
const OperationTickTockerUpdateTaskDefineStatus = "/helloworld.v1.TickTocker/UpdateTaskDefineStatus"

type TickTockerHTTPServer interface {
	// CreateTaskDefine Create task_define
	CreateTaskDefine(context.Context, *CreateRequest) (*CreateReply, error)
	// UpdateTaskDefineStatus Update task_define status
	UpdateTaskDefineStatus(context.Context, *UpdateRequest) (*UpdateReply, error)
}

func RegisterTickTockerHTTPServer(s *http.Server, srv TickTockerHTTPServer) {
	r := s.Route("/")
	r.POST("/tick-tock/task-define", _TickTocker_CreateTaskDefine0_HTTP_Handler(srv))
	r.PUT("/tick-tock/task-define/{tid}", _TickTocker_UpdateTaskDefineStatus0_HTTP_Handler(srv))
}

func _TickTocker_CreateTaskDefine0_HTTP_Handler(srv TickTockerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTickTockerCreateTaskDefine)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTaskDefine(ctx, req.(*CreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateReply)
		return ctx.Result(200, reply)
	}
}

func _TickTocker_UpdateTaskDefineStatus0_HTTP_Handler(srv TickTockerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTickTockerUpdateTaskDefineStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTaskDefineStatus(ctx, req.(*UpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateReply)
		return ctx.Result(200, reply)
	}
}

type TickTockerHTTPClient interface {
	CreateTaskDefine(ctx context.Context, req *CreateRequest, opts ...http.CallOption) (rsp *CreateReply, err error)
	UpdateTaskDefineStatus(ctx context.Context, req *UpdateRequest, opts ...http.CallOption) (rsp *UpdateReply, err error)
}

type TickTockerHTTPClientImpl struct {
	cc *http.Client
}

func NewTickTockerHTTPClient(client *http.Client) TickTockerHTTPClient {
	return &TickTockerHTTPClientImpl{client}
}

func (c *TickTockerHTTPClientImpl) CreateTaskDefine(ctx context.Context, in *CreateRequest, opts ...http.CallOption) (*CreateReply, error) {
	var out CreateReply
	pattern := "/tick-tock/task-define"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTickTockerCreateTaskDefine))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TickTockerHTTPClientImpl) UpdateTaskDefineStatus(ctx context.Context, in *UpdateRequest, opts ...http.CallOption) (*UpdateReply, error) {
	var out UpdateReply
	pattern := "/tick-tock/task-define/{tid}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTickTockerUpdateTaskDefineStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
