// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/tick_tock/v1/tick_tock.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TickTocker_CreateTaskDefine_FullMethodName       = "/helloworld.v1.TickTocker/CreateTaskDefine"
	TickTocker_UpdateTaskDefineStatus_FullMethodName = "/helloworld.v1.TickTocker/UpdateTaskDefineStatus"
)

// TickTockerClient is the client API for TickTocker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickTockerClient interface {
	// Create task_define
	CreateTaskDefine(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	// Update task_define status
	UpdateTaskDefineStatus(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
}

type tickTockerClient struct {
	cc grpc.ClientConnInterface
}

func NewTickTockerClient(cc grpc.ClientConnInterface) TickTockerClient {
	return &tickTockerClient{cc}
}

func (c *tickTockerClient) CreateTaskDefine(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, TickTocker_CreateTaskDefine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickTockerClient) UpdateTaskDefineStatus(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, TickTocker_UpdateTaskDefineStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickTockerServer is the server API for TickTocker service.
// All implementations must embed UnimplementedTickTockerServer
// for forward compatibility.
type TickTockerServer interface {
	// Create task_define
	CreateTaskDefine(context.Context, *CreateRequest) (*CreateReply, error)
	// Update task_define status
	UpdateTaskDefineStatus(context.Context, *UpdateRequest) (*UpdateReply, error)
	mustEmbedUnimplementedTickTockerServer()
}

// UnimplementedTickTockerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTickTockerServer struct{}

func (UnimplementedTickTockerServer) CreateTaskDefine(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskDefine not implemented")
}
func (UnimplementedTickTockerServer) UpdateTaskDefineStatus(context.Context, *UpdateRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskDefineStatus not implemented")
}
func (UnimplementedTickTockerServer) mustEmbedUnimplementedTickTockerServer() {}
func (UnimplementedTickTockerServer) testEmbeddedByValue()                    {}

// UnsafeTickTockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickTockerServer will
// result in compilation errors.
type UnsafeTickTockerServer interface {
	mustEmbedUnimplementedTickTockerServer()
}

func RegisterTickTockerServer(s grpc.ServiceRegistrar, srv TickTockerServer) {
	// If the following call pancis, it indicates UnimplementedTickTockerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TickTocker_ServiceDesc, srv)
}

func _TickTocker_CreateTaskDefine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickTockerServer).CreateTaskDefine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickTocker_CreateTaskDefine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickTockerServer).CreateTaskDefine(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TickTocker_UpdateTaskDefineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickTockerServer).UpdateTaskDefineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickTocker_UpdateTaskDefineStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickTockerServer).UpdateTaskDefineStatus(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TickTocker_ServiceDesc is the grpc.ServiceDesc for TickTocker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TickTocker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.TickTocker",
	HandlerType: (*TickTockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTaskDefine",
			Handler:    _TickTocker_CreateTaskDefine_Handler,
		},
		{
			MethodName: "UpdateTaskDefineStatus",
			Handler:    _TickTocker_UpdateTaskDefineStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tick_tock/v1/tick_tock.proto",
}
